{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MohamedCHERCHERI\\\\Desktop\\\\Salma\\\\salma_jobs\\\\Learn\\\\Projects\\\\Django\\\\notes_app\\\\frontend\\\\src\\\\pages\\\\NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = _ref => {\n  _s();\n\n  let {} = _ref;\n  let {\n    id\n  } = useParams();\n  let [note, setNote] = useState(null);\n  const history = useNavigate();\n  useEffect(() => {\n    getNote();\n  }, [id]);\n\n  let getNote = async () => {\n    let response = await fetch(`/api/note/${id}`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  let createNote = async () => {\n    fetch(`/api/note/create/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let updateNote = async () => {\n    fetch(`/api/note/${id}/update/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n    history(\"/\");\n  };\n\n  let deleteNote = async () => {\n    if (id === \"new\") return;\n    fetch(`/api/note/${id}/delete/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n\n  let handleSubmit = () => {\n    if (id !== \"new\" && note.body === '') {\n      // if note is empty and it's not a new note, delete it\n      deleteNote();\n    } else if (id !== \"new\") {\n      // else update note\n      updateNote();\n    } else if (id === \"new\" && !note.body) {\n      createNote();\n    }\n\n    history(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), id !== \"new\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \" Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \" Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({ ...note,\n          body: e.target.value\n        });\n        console.log('e : =', e.target.value, e.target.value === '');\n      },\n      defaultValue: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"MfrgX6KsiKFrW8TXv6d8XqGjPmk=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["C:/Users/MohamedCHERCHERI/Desktop/Salma/salma_jobs/Learn/Projects/Django/notes_app/frontend/src/pages/NotePage.js"],"names":["React","useEffect","useState","useParams","useNavigate","ReactComponent","ArrowLeft","NotePage","id","note","setNote","history","getNote","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","updateNote","deleteNote","handleSubmit","e","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\r\n\r\nconst NotePage = ({}) => {\r\n  let { id } = useParams();\r\n  let [note, setNote] = useState(null);\r\n  const history = useNavigate();\r\n\r\n  useEffect(() => {\r\n    getNote();\r\n  }, [id]);\r\n\r\n  let getNote = async () => {\r\n    let response = await fetch(`/api/note/${id}`);\r\n    let data = await response.json();\r\n    setNote(data);\r\n  };\r\n\r\n  let createNote = async () => {\r\n    fetch(`/api/note/create/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(note),\r\n    });\r\n  };\r\n\r\n  let updateNote = async () => {\r\n    fetch(`/api/note/${id}/update/`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(note),\r\n    });\r\n    history(\"/\");\r\n  };\r\n\r\n  let deleteNote = async () => {\r\n    if (id === \"new\") return;\r\n    fetch(`/api/note/${id}/delete/`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n  };\r\n\r\n  let handleSubmit = () => {\r\n    if (id !== \"new\" && note.body === '') {\r\n      // if note is empty and it's not a new note, delete it\r\n      deleteNote();\r\n    } else if (id !== \"new\") {\r\n      // else update note\r\n      updateNote();\r\n    } else if (id === \"new\" && !note.body) {\r\n      createNote();\r\n    }\r\n    history(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"note-header\">\r\n        <h3>\r\n          <ArrowLeft onClick={handleSubmit} />\r\n        </h3>\r\n        {id !== \"new\" ? (\r\n          <button onClick={deleteNote}> Delete</button>\r\n        ) : (\r\n          <button onClick={handleSubmit}> Done</button>\r\n        )}\r\n      </div>\r\n      <textarea\r\n        onChange={(e) => {\r\n          setNote({ ...note, body: e.target.value });\r\n          console.log('e : =', e.target.value, e.target.value === '')\r\n        }}\r\n        defaultValue={note?.body}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotePage;\r\n"]},"metadata":{},"sourceType":"module"}